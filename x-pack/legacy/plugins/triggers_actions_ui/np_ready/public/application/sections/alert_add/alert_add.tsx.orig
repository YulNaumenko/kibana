/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
import React, { useCallback } from 'react';
import { FormattedMessage } from '@kbn/i18n/react';
import { EuiTitle, EuiFlyoutHeader, EuiFlyout, EuiPortal } from '@elastic/eui';
import { useAlertsContext } from '../../context/alerts_context';
import { Alert } from '../../../types';
import { AlertForm } from './alert_form';

<<<<<<< HEAD
export const AlertAdd = () => {
  const initialAlert = ({
=======
interface Props {
  refreshList: () => Promise<void>;
}

function validateBaseProperties(alertObject: Alert) {
  const validationResult = { errors: {} };
  const errors = {
    name: new Array<string>(),
    interval: new Array<string>(),
    alertTypeId: new Array<string>(),
    actionConnectors: new Array<string>(),
  };
  validationResult.errors = errors;
  if (!alertObject.name) {
    errors.name.push(
      i18n.translate('xpack.triggersActionsUI.sections.alertAdd.error.requiredNameText', {
        defaultMessage: 'Name is required.',
      })
    );
  }
  if (!(alertObject.schedule && alertObject.schedule.interval)) {
    errors.interval.push(
      i18n.translate('xpack.triggersActionsUI.sections.alertAdd.error.requiredIntervalText', {
        defaultMessage: 'Check interval is required.',
      })
    );
  }
  if (!alertObject.alertTypeId) {
    errors.alertTypeId.push(
      i18n.translate('xpack.triggersActionsUI.sections.alertAdd.error.requiredAlertTypeIdText', {
        defaultMessage: 'Alert trigger is required.',
      })
    );
  }
  return validationResult;
}

export const AlertAdd = ({ refreshList }: Props) => {
  const { http, toastNotifications, alertTypeRegistry, actionTypeRegistry } = useAppDependencies();
  const initialAlert = {
>>>>>>> upstream/master
    params: {},
    consumer: 'alerting',
    alertTypeId: null,
    schedule: {
      interval: '1m',
    },
    actions: [],
    tags: [],
<<<<<<< HEAD
    muteAll: false,
    enabled: false,
    mutedInstanceIds: [],
  } as unknown) as Alert;
=======
  };

  const { alertFlyoutVisible, setAlertFlyoutVisibility } = useAlertsContext();
  // hooks
  const [alertType, setAlertType] = useState<AlertTypeModel | undefined>(undefined);
  const [{ alert }, dispatch] = useReducer(alertReducer, { alert: initialAlert });
  const [isSaving, setIsSaving] = useState<boolean>(false);
  const [isLoadingActionTypes, setIsLoadingActionTypes] = useState<boolean>(false);
  const [selectedTabId, setSelectedTabId] = useState<string>('alert');
  const [actionTypesIndex, setActionTypesIndex] = useState<ActionTypeIndex | undefined>(undefined);
  const [alertInterval, setAlertInterval] = useState<number | null>(null);
  const [alertIntervalUnit, setAlertIntervalUnit] = useState<string>('m');
  const [alertThrottle, setAlertThrottle] = useState<number | null>(null);
  const [alertThrottleUnit, setAlertThrottleUnit] = useState<string>('');
  const [serverError, setServerError] = useState<{
    body: { message: string; error: string };
  } | null>(null);
  const [isAddActionPanelOpen, setIsAddActionPanelOpen] = useState<boolean>(true);
  const [connectors, setConnectors] = useState<ActionConnector[]>([]);

  useEffect(() => {
    (async () => {
      try {
        setIsLoadingActionTypes(true);
        const actionTypes = await loadActionTypes({ http });
        const index: ActionTypeIndex = {};
        for (const actionTypeItem of actionTypes) {
          index[actionTypeItem.id] = actionTypeItem;
        }
        setActionTypesIndex(index);
      } catch (e) {
        toastNotifications.addDanger({
          title: i18n.translate(
            'xpack.triggersActionsUI.sections.alertAdd.unableToLoadActionTypesMessage',
            { defaultMessage: 'Unable to load action types' }
          ),
        });
      } finally {
        setIsLoadingActionTypes(false);
      }
    })();
  }, [toastNotifications, http]);

  useEffect(() => {
    dispatch({
      command: { type: 'setAlert' },
      payload: {
        key: 'alert',
        value: {
          params: {},
          alertTypeId: null,
          schedule: {
            interval: '1m',
          },
          actions: [],
          tags: [],
        },
      },
    });
  }, [alertFlyoutVisible]);

  useEffect(() => {
    loadConnectors();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [alertFlyoutVisible]);

  const setAlertProperty = (key: string, value: any) => {
    dispatch({ command: { type: 'setProperty' }, payload: { key, value } });
  };

  const setAlertParams = (key: string, value: any) => {
    dispatch({ command: { type: 'setAlertParams' }, payload: { key, value } });
  };

  const setActionParamsProperty = (key: string, value: any, index: number) => {
    dispatch({ command: { type: 'setAlertActionParams' }, payload: { key, value, index } });
  };
>>>>>>> upstream/master

  const { addFlyoutVisible, setAddFlyoutVisibility } = useAlertsContext();

  const closeFlyout = useCallback(() => {
    setAddFlyoutVisibility(false);
  }, [setAddFlyoutVisibility]);

  if (!addFlyoutVisible) {
    return null;
  }

  return (
    <EuiPortal>
      <EuiFlyout
        ownFocus
        onClose={closeFlyout}
        aria-labelledby="flyoutAlertAddTitle"
        size="m"
        maxWidth={620}
      >
        <EuiFlyoutHeader hasBorder>
          <EuiTitle size="s">
            <h3 id="flyoutTitle">
              <FormattedMessage
                defaultMessage="Create Alert"
                id="xpack.triggersActionsUI.sections.alertAdd.flyoutTitle"
              />
            </h3>
          </EuiTitle>
        </EuiFlyoutHeader>
<<<<<<< HEAD
        <AlertForm initialAlert={initialAlert} setFlyoutVisibility={setAddFlyoutVisibility} />
=======
        <EuiFlyoutBody>
          <EuiForm isInvalid={serverError !== null} error={serverError?.body.message}>
            <EuiFlexGrid columns={2}>
              <EuiFlexItem>
                <EuiFormRow
                  fullWidth
                  id="alertName"
                  label={
                    <FormattedMessage
                      id="xpack.triggersActionsUI.sections.alertAdd.alertNameLabel"
                      defaultMessage="Name"
                    />
                  }
                  isInvalid={hasErrors && alert.name !== undefined}
                  error={errors.name}
                >
                  <EuiFieldText
                    fullWidth
                    isInvalid={hasErrors && alert.name !== undefined}
                    compressed
                    name="name"
                    data-test-subj="alertNameInput"
                    value={alert.name || ''}
                    onChange={e => {
                      setAlertProperty('name', e.target.value);
                    }}
                    onBlur={() => {
                      if (!alert.name) {
                        setAlertProperty('name', '');
                      }
                    }}
                  />
                </EuiFormRow>
              </EuiFlexItem>
              <EuiFlexItem>
                <EuiFormRow
                  fullWidth
                  label={i18n.translate(
                    'xpack.triggersActionsUI.sections.actionAdd.indexAction.indexTextFieldLabel',
                    {
                      defaultMessage: 'Tags (optional)',
                    }
                  )}
                >
                  <EuiComboBox
                    noSuggestions
                    fullWidth
                    compressed
                    data-test-subj="tagsComboBox"
                    selectedOptions={tagsOptions}
                    onCreateOption={(searchValue: string) => {
                      const newOptions = [...tagsOptions, { label: searchValue }];
                      setAlertProperty(
                        'tags',
                        newOptions.map(newOption => newOption.label)
                      );
                    }}
                    onChange={(selectedOptions: Array<{ label: string }>) => {
                      setAlertProperty(
                        'tags',
                        selectedOptions.map(selectedOption => selectedOption.label)
                      );
                    }}
                    onBlur={() => {
                      if (!alert.tags) {
                        setAlertProperty('tags', []);
                      }
                    }}
                  />
                </EuiFormRow>
              </EuiFlexItem>
            </EuiFlexGrid>
            <EuiSpacer size="m" />
            <EuiFlexGrid columns={2}>
              <EuiFlexItem>
                <EuiFormRow fullWidth compressed label={labelForAlertChecked}>
                  <EuiFlexGroup gutterSize="s">
                    <EuiFlexItem>
                      <EuiFieldNumber
                        fullWidth
                        min={1}
                        compressed
                        value={alertInterval || 1}
                        name="interval"
                        data-test-subj="intervalInput"
                        onChange={e => {
                          const interval =
                            e.target.value !== '' ? parseInt(e.target.value, 10) : null;
                          setAlertInterval(interval);
                          setAlertProperty('schedule', {
                            interval: `${e.target.value}${alertIntervalUnit}`,
                          });
                        }}
                      />
                    </EuiFlexItem>
                    <EuiFlexItem grow={false}>
                      <EuiSelect
                        fullWidth
                        compressed
                        value={alertIntervalUnit}
                        options={getTimeOptions((alertInterval ? alertInterval : 1).toString())}
                        onChange={(e: any) => {
                          setAlertIntervalUnit(e.target.value);
                          setAlertProperty('schedule', {
                            interval: `${alertInterval}${e.target.value}`,
                          });
                        }}
                      />
                    </EuiFlexItem>
                  </EuiFlexGroup>
                </EuiFormRow>
              </EuiFlexItem>
              <EuiFlexItem>
                <EuiFormRow fullWidth label={labelForAlertRenotify}>
                  <EuiFlexGroup gutterSize="s">
                    <EuiFlexItem>
                      <EuiFieldNumber
                        fullWidth
                        min={1}
                        compressed
                        value={alertThrottle || ''}
                        name="throttle"
                        data-test-subj="throttleInput"
                        onChange={e => {
                          const throttle =
                            e.target.value !== '' ? parseInt(e.target.value, 10) : null;
                          setAlertThrottle(throttle);
                          setAlertProperty('throttle', `${e.target.value}${alertThrottleUnit}`);
                        }}
                      />
                    </EuiFlexItem>
                    <EuiFlexItem grow={false}>
                      <EuiSelect
                        compressed
                        value={alert.renotifyIntervalUnit}
                        options={getTimeOptions(alert.renotifyIntervalSize)}
                        onChange={(e: any) => {
                          setAlertThrottleUnit(e.target.value);
                          setAlertProperty('throttle', `${alertThrottle}${e.target.value}`);
                        }}
                      />
                    </EuiFlexItem>
                  </EuiFlexGroup>
                </EuiFormRow>
              </EuiFlexItem>
            </EuiFlexGrid>
            <EuiSpacer size="m" />
            <EuiTabs>{alertTabs}</EuiTabs>
            <EuiSpacer size="m" />
            {alertTypeArea}
            <EuiSpacer size="xl" />
            {actionsListForGroup}
            {isAddActionPanelOpen ? (
              <Fragment>
                <EuiTitle size="s">
                  <h5 id="alertActionTypeTitle">
                    <FormattedMessage
                      defaultMessage="Select an action"
                      id="xpack.triggersActionsUI.sections.alertAdd.selectAlertActionTypeTitle"
                    />
                  </h5>
                </EuiTitle>
                <EuiSpacer />
                <EuiFlexGroup gutterSize="s" wrap>
                  {isLoadingActionTypes ? (
                    <SectionLoading>
                      <FormattedMessage
                        id="xpack.triggersActionsUI.sections.alertAdd.loadingActionTypesDescription"
                        defaultMessage="Loading action types…"
                      />
                    </SectionLoading>
                  ) : (
                    actionTypeNodes
                  )}
                </EuiFlexGroup>
              </Fragment>
            ) : null}
          </EuiForm>
        </EuiFlyoutBody>
        <EuiFlyoutFooter>
          <EuiFlexGroup justifyContent="spaceBetween">
            <EuiFlexItem grow={false}>
              <EuiButtonEmpty onClick={closeFlyout}>
                {i18n.translate('xpack.triggersActionsUI.sections.alertAdd.cancelButtonLabel', {
                  defaultMessage: 'Cancel',
                })}
              </EuiButtonEmpty>
            </EuiFlexItem>
            <EuiFlexItem grow={false}>
              <EuiButton
                fill
                color="secondary"
                data-test-subj="saveActionButton"
                type="submit"
                iconType="check"
                isDisabled={hasErrors || hasActionErrors}
                isLoading={isSaving}
                onClick={async () => {
                  setIsSaving(true);
                  const savedAlert = await onSaveAlert();
                  setIsSaving(false);
                  if (savedAlert && savedAlert.error) {
                    return setServerError(savedAlert.error);
                  }
                  closeFlyout();
                  refreshList();
                }}
              >
                <FormattedMessage
                  id="xpack.triggersActionsUI.sections.alertAdd.saveButtonLabel"
                  defaultMessage="Save"
                />
              </EuiButton>
            </EuiFlexItem>
          </EuiFlexGroup>
        </EuiFlyoutFooter>
>>>>>>> upstream/master
      </EuiFlyout>
    </EuiPortal>
  );
};
