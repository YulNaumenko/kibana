/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { z } from 'zod';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Evaluate API endpoint
 *   version: 2023-10-31
 */

export type DatasetItem = z.infer<typeof DatasetItem>;
export const DatasetItem = z.object({
  id: z.string(),
  input: z.string().optional(),
  reference: z.string(),
  tags: z.array(z.string()).optional(),
  prediction: z.string().optional(),
});

export type Dataset = z.infer<typeof Dataset>;
export const Dataset = z.array(DatasetItem);

export type EvaluateRequestQuery = z.infer<typeof EvaluateRequestQuery>;
export const EvaluateRequestQuery = z.object({
  agents: z.string(),
  models: z.string(),
  outputIndex: z.string(),
  datasetName: z.string().optional(),
  evaluationType: z.string().optional(),
  evalModel: z.string().optional(),
  projectName: z.string().optional(),
  runName: z.string().optional(),
});
export type EvaluateRequestQueryInput = z.input<typeof EvaluateRequestQuery>;

export type EvaluateRequestBody = z.infer<typeof EvaluateRequestBody>;
export const EvaluateRequestBody = z.object({
  dataset: Dataset.optional(),
  evalPrompt: z.string().optional(),
});
export type EvaluateRequestBodyInput = z.input<typeof EvaluateRequestBody>;

export type EvaluateResponse = z.infer<typeof EvaluateResponse>;
export const EvaluateResponse = z.object({
  evaluationId: z.number().optional(),
});
